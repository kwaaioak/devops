require 'erb'

CLOUDFORMATION_JSON='cloudformation.json'
CONFIG='config.rb'
CONFIG_LOCAL='config.local.rb'

load CONFIG
load CONFIG_LOCAL if File.exist?(CONFIG_LOCAL)

task :default => :up

desc "Builds the AWS CloudFormation config"
file CLOUDFORMATION_JSON => [ CLOUDFORMATION_JSON + '.erb', CONFIG ] do 
    File.open(CLOUDFORMATION_JSON, 'w+') do |f|
        f.write(ERB.new(File.read(CLOUDFORMATION_JSON + '.erb')).result())
    end
end

task :upload_recipes do
  sh %{ berks package -b ../Berksfile cookbooks.tar.gz }
  sh %{knife s3 --config=} + @knife_config + %{ upload --public -b } + @devops_bucket + %{ -f cookbooks.tar.gz}
end

task :up => [ CLOUDFORMATION_JSON, :upload_recipes ] do
  params = {
    :'RecipeURL' => 'https://' + @devops_bucket + '.s3.amazonaws.com/cookbooks.tar.gz',
    :'KeyName' => @key_name,
    :'AvailabilityZone' => @availability_zone,
    :'SnapshotId' => @snapshot,
    :'ZoneName' => @domain_root,
    :'Debug' => @debug
  }.map{|k,v| "#{k}=#{v}"}.join(';')

  sh %{knife cfn --config=} + @knife_config + %{ create } + @stack_name + %{ --capabilities CAPABILITY_IAM } + %{ -f } + CLOUDFORMATION_JSON + %{ --parameters '} + params + %{'}
end

task :update => [ CLOUDFORMATION_JSON, :upload_recipes ] do
  params = {
    :'RecipeURL' => 'https://' + @devops_bucket + '.s3.amazonaws.com/cookbooks.tar.gz',
    :'KeyName' => @key_name,
    :'AvailabilityZone' => @availability_zone,
    :'SnapshotId' => @snapshot,
    :'ZoneName' => @domain_root,
    :'Debug' => @debug
  }.map{|k,v| "#{k}=#{v}"}.join(';')

  sh %{knife cfn --config=} + @knife_config + %{ update } + @stack_name + %{ --capabilities CAPABILITY_IAM } + %{ -f } + CLOUDFORMATION_JSON + %{ --parameters '} + params + %{'}
end

task :destroy do
  sh %{knife cfn --config=} + @knife_config + %{ delete } + @stack_name
end

task :validate => [ CLOUDFORMATION_JSON ] do
  sh %{knife cfn --config=} + @knife_config + %{ validate -f } + CLOUDFORMATION_JSON
end

desc "Opens a secure shell to the server"
task :ssh do |t, args|
    knife_opts="--config=#{@knife_config}" if @knife_config
    shell = `knife cfn #{knife_opts} outputs --output_parameter_format #{@stack_name}`
    if !shell.nil?
        outputs = Hash.new
        shell.split(/\n/).reject(&:empty?).each do |line|
            row = line.split(/[\w-]+: (\w+)=(.+)/)
            outputs[row[1]] = row[2]
        end
        hostname = outputs['PublicIp']
    end

    # This is somewhat dangerous at it relies on correct DNS entries
    # (sometimes, we just need to get into the server before CloudFormation has done its thing)
    hostname = "ops.#{@domain}" if hostname.nil?

    sh "ssh -o StrictHostKeyChecking=no -i ~/.ssh/#{@key_name}.pem ubuntu@#{hostname}"
end
