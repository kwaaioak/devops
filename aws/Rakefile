require 'erb'
require 'rake/clean'

namespace :aws do

    CLOUDFORMATION_JSON=File.dirname(__FILE__) + '/cloudformation.json'

    task :default => :up

    desc "Builds the AWS CloudFormation config"
    file CLOUDFORMATION_JSON => [ CLOUDFORMATION_JSON + '.erb', CONFIG ] do 
        File.open(CLOUDFORMATION_JSON, 'w+') do |f|
            f.write(ERB.new(File.read(CLOUDFORMATION_JSON + '.erb')).result())
        end
    end

    task :upload_repo do
        knife_opts="--config=#{@knife_config}" if @knife_config

        berksfile=File.dirname(__FILE__) + '/../Berksfile'
        cookbooks_tarball=File.dirname(__FILE__) + '/cookbooks.tar.gz'
        sh "berks package -b #{berksfile} #{cookbooks_tarball}"
        sh "knife s3 #{knife_opts} upload --public -b #{@devops_bucket} -f #{cookbooks_tarball} -r cookbooks.tar.gz"

        chef_repo_tarball=File.dirname(__FILE__) + '/chef_repo.tar.gz'
        chef_repo_dir=File.dirname(__FILE__) + '/../chef-repo'
        sh "tar -zcvf #{chef_repo_tarball} -C #{chef_repo_dir} ./"
        sh "knife s3 #{knife_opts} upload --public -b #{@devops_bucket} -f #{chef_repo_tarball} -r chef_repo.tar.gz"
    end

    task :up, [ :snapshot_id ] => [ CLOUDFORMATION_JSON, :upload_repo ] do | t, args |
        snapshot_id = args[:snapshot_id]

        params = {
            :'StackName' => @stack_name,
            :'Description' => "#{@description} (#{@stack_name})",
            :'ImageId' => @image_id,
            :'ChefRepoURL' => 'https://' + @devops_bucket + '.s3.amazonaws.com/chef_repo.tar.gz',
            :'ChefCookbooksURL' => 'https://' + @devops_bucket + '.s3.amazonaws.com/cookbooks.tar.gz',
            :'KeyName' => @key_name,
            :'AvailabilityZone' => @availability_zone,
            :'ZoneName' => @domain,
            :'Debug' => @debug,
            :'InstanceType' => @aws_instance_type,
            :'DiskSize' => @aws_disk_size
        }
        params['SnapshotId'] = snapshot_id if !snapshot_id.nil?

        knife_opts="--config=#{@knife_config}" if @knife_config
        sh "knife cfn #{knife_opts} create #{@stack_name} --capabilities CAPABILITY_IAM -f #{CLOUDFORMATION_JSON} --parameters '" + params.map{|k,v| "#{k}=#{v}"}.join(';') + "'"
    end

    task :update => [ CLOUDFORMATION_JSON, :upload_repo ] do | t, args |
        snapshot_id = args[:snapshot_id]

        params = {
            :'StackName' => @stack_name,
            :'Description' => "#{@description} (#{@stack_name})",
            :'ImageId' => @image_id,
            :'RecipeURL' => 'https://' + @devops_bucket + '.s3.amazonaws.com/cookbooks.tar.gz',
            :'KeyName' => @key_name,
            :'AvailabilityZone' => @availability_zone,
            :'ZoneName' => @domain,
            :'Debug' => @debug,
            :'InstanceType' => @aws_instance_type,
            :'DiskSize' => @aws_disk_size
        }
        params['SnapshotId'] = snapshot_id if !snapshot_id.nil?

        knife_opts="--config=#{@knife_config}" if @knife_config
        sh "knife cfn #{knife_opts} update #{@stack_name} --capabilities CAPABILITY_IAM -f #{CLOUDFORMATION_JSON} --parameters '" + params.map{|k,v| "#{k}=#{v}"}.join(';') + "'"
    end

    desc "Destroys a server stack"
    task :destroy do |t, args|
        knife_opts="--config=#{@knife_config}" if @knife_config
        sh "knife cfn #{knife_opts} delete #{@stack_name}"
    end

    task :validate => [ CLOUDFORMATION_JSON ] do
        knife_opts="--config=#{@knife_config}" if @knife_config
        sh "knife cfn #{knife_config} validate -f #{CLOUDFORMATION_JSON}"
    end

    desc "Opens a secure shell to the server"
    task :ssh do |t, args|
        knife_opts="--config=#{@knife_config}" if @knife_config
        shell = `knife cfn #{knife_opts} outputs --output_parameter_format #{@stack_name}`
        if !shell.nil?
            outputs = Hash.new
            shell.split(/\n/).reject(&:empty?).each do |line|
                row = line.split(/[\w-]+: (\w+)=(.+)/)
                outputs[row[1]] = row[2]
            end
            hostname = outputs['PublicIp']
        end

        # This is somewhat dangerous at it relies on correct DNS entries
        # (sometimes, we just need to get into the server before CloudFormation has done its thing)
        hostname = "ops.#{@domain}" if hostname.nil?

        sh "ssh -o StrictHostKeyChecking=no -i ~/.ssh/#{@key_name}.pem ubuntu@#{hostname}"
    end

    CLEAN.include FileList[File.dirname(__FILE__) + 'cloudformation.json.erb', File.dirname(__FILE__) + '/tmp', File.dirname(__FILE__) + '/cookbooks' ]
end

