{
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Description": "Kwaai Oak DevOps (Single Server Full Stack)",
    "Parameters": {
        "AvailabilityZone": {
            "Default": "us-east-1a", 
            "Description": "Availability zone of the instances/volumes", 
            "Type": "String"
        }, 
        "InstanceType": {
            "AllowedValues": [
                "t2.micro", 
                "t2.small", 
                "t2.medium", 
                "m3.medium", 
                "m3.large", 
                "m3.xlarge", 
                "m3.2xlarge", 
                "c4.large", 
                "c4.xlarge", 
                "c4.2xlarge", 
                "c4.4xlarge", 
                "c4.8xlarge", 
                "c3.large", 
                "c3.xlarge", 
                "c3.2xlarge", 
                "c3.4xlarge", 
                "c3.8xlarge", 
                "r3.large", 
                "r3.xlarge", 
                "r3.2xlarge", 
                "r3.4xlarge", 
                "r3.8xlarge", 
                "g2.2xlarge", 
                "i2.xlarge", 
                "i2.2xlarge", 
                "i2.4xlarge", 
                "i2.8xlarge", 
                "hs1.8xlarge"
            ], 
            "ConstraintDescription": "must contain only alphanumeric characters.", 
            "Default": "m3.large", 
            "Description": "Type of EC2 instance for application server", 
            "Type": "String"
        }, 
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the web server", 
            "Type": "String"
        }, 
        "StackName": {
            "Description": "Name of the stack", 
            "Type": "String"
        }, 
        "ImageId": {
            "Description": "The AMI image id", 
            "Type": "String"
        }, 
        "Description": {
            "Description": "A description of the stack", 
            "Type": "String"
        }, 
        "ChefRepoURL": {
            "Description": "The location of the recipe tarball", 
            "Type": "String"
        }, 
        "ChefCookbooksURL": {
            "Description": "The location of the cookbooks tarball", 
            "Type": "String"
        }, 
        "SnapshotId": {
            "Default": "", 
            "Description": "An existing snapshot to initialize storage with (use for data recovery)", 
            "Type": "String"
        }, 
        "Debug": {
            "Default": "", 
            "Description": "If not empty, turn on debugging (and increase timeout to max values)", 
            "Type": "String"
        }, 
        "ZoneName": {
            "Description": "The hosted zone used for DNS updates (this must be created manually)", 
            "Type": "String"
        }
    }, 
    "Outputs": {
        "PublicIp": {
            "Value": { "Fn::GetAtt": [ "DevOpsServerInstance", "PublicIp" ] }
        }
    },
    "Conditions": {
        "CreateFromSnapshot": {
            "Fn::Not" : [{ "Fn::Equals": [ { "Ref": "SnapshotId" }, "" ] }]
        },
        "Debug": {
            "Fn::Not" : [{ "Fn::Equals": [ { "Ref": "Debug" }, "" ] }]
        }
    },
    "Resources": {
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": { "Ref": "DevOpsServerUser" }
            }
        },
        "DevOpsServerSecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" :
            {
                "GroupDescription" : { "Ref": "Description" }, 
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "443",
                        "ToPort" : "443",
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "7999",
                        "ToPort" : "7999",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },
        "DevOpsServerInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "default": [ { "ConfigSet": "install" } ],
                        "install": [ "install_cfn", "install_chef", "unpack_repo", "run_chef" ],
                        "update": [ "unpack_repo", "run_chef" ]
                    },
                    "install_cfn": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": { "Fn::Join": [ "", [
                                    "[main]\n",
                                    "stack=", { "Ref": "AWS::StackId" }, "\n", "region=", { "Ref": "AWS::Region" }, "\n"
                                ]]},
                                "mode" : "000400",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": { "Fn::Join": [ "", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n", "path=Resources.DevOpsServerInstance.Metadata.AWS::CloudFormation::Init\n", "action=/opt/aws/bin/cfn-init ",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource DevOpsServerInstance ",
                                    " --configsets install ",
                                    " --region ", { "Ref" : "AWS::Region" }, "\n"
                                ]]},
                                "mode" : "0400",
                                "owner" : "root",
                                "group" : "root"
                            }
                        }
                    },
                    "install_chef": {
                        "files": {
                            "/tmp/install-chef.sh": {
                                "source": "https://www.chef.io/chef/install.sh",
                                "mode": "0600",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/chef/node.json": {
                                "content": { "Fn::Join": [ "\n", [
                                    "{", 
                                    "  \"apache\": {", 
                                    "    \"listen_ports\": [", 
                                    "      \"80\"", 
                                    "    ],", 
                                    "    \"version\": \"2.4\"", 
                                    "  },", 
                                    "  \"java\": {", 
                                    "    \"jdk_version\": \"7\"", 
                                    "  },", 
<% if !@services.any? or @services.include? 'bamboo' %>
                                    "  \"bamboo\": {", 
                                    { "Fn::Join": [ "", [
                                        "    \"node_name\": ",
                                        "\"bamboo.", { "Ref": "ZoneName" }, "\""
                                    ] ] }, 
                                    "  },", 
<% end %>
<% if !@services.any? or @services.include? 'jenkins' %>
                                    "  \"jenkins\": {", 
                                    "    \"master\": {", 
                                    "      \"install_method\": \"package\",", 
                                    "      \"port\": \"8090\"", 
                                    "    }", 
                                    "  },", 
<% end %>
<% if !@services.any? or @services.include? 'jira' %>
                                    "  \"jira\": {", 
                                    { "Fn::Join": [ "", [
                                        "    \"node_name\": ",
                                        "\"jira.", { "Ref": "ZoneName" }, "\""
                                    ] ] }, 
                                    "  },", 
<% end %>
                                    "  \"mysql\": {", 
                                    "    \"allow_remote_root\": true,", 
                                    "    \"bind_address\": \"0.0.0.0\",", 
                                    "    \"data_dir\": \"/var/lib/mysql\",", 
                                    "    \"root_network_acl\": [", 
                                    "      \"0.0.0.0/32\"", 
                                    "    ],", 
                                    "    \"server_debian_password\": \"password\",", 
                                    "    \"server_repl_password\": \"password\",", 
                                    "    \"server_root_password\": \"password\",", 
                                    "    \"template_source\": \"my.cnf.erb\"", 
                                    "  },", 
                                    "  \"run_list\": [", 
                                    "    \"recipe[apt]\",", 
                                    "    \"recipe[storage]\",", 
                                    "    \"recipe[mysql::server]\",", 
                                    "    \"recipe[apache2]\",", 
                                    "    \"recipe[reverse-proxy]\"",<% runlist_one = true %>
<% if !@services.any? or @services.include? 'jenkins' %>
                                    "    <%  if runlist_one %>,<% end; runlist_one = true %>\"recipe[jenkins::master]\"", 
<% end %>
<% if !@services.any? or @services.include? 'chef' %>
                                    "    <%  if runlist_one %>,<% end; runlist_one = true %>\"recipe[chef-server]\"",
<% end %>
<% if !@services.any? or @services.include? 'jira' %>
                                    "    <%  if runlist_one %>,<% end; runlist_one = true %>\"recipe[jira]\"",
<% end %>
<% if !@services.any? or @services.include? 'stash' %>
                                    "    <%  if runlist_one %>,<% end; runlist_one = true %>\"recipe[stash]\"",
<% end %>
<% if !@services.any? or @services.include? 'bamboo' %>
                                    "    <%  if runlist_one %>,<% end; runlist_one = true %>\"recipe[bamboo]\"",
<% end %>
                                    "  ],", 
<% if !@services.any? or @services.include? 'stash' %>
                                    "  \"stash\": {", 
                                    "    \"home\": \"/mnt/storage/stash\",", 
                                    { "Fn::Join": [ "", [
                                    "    \"node_name\": ",
                                    "\"stash.", { "Ref": "ZoneName" }, "\""
                                    ] ] }, 
                                    "  },", 
<% end %>
<% if !@services.any? or @services.include? 'bamboo' %>
                                    "  \"bamboo\": {", 
                                    { "Fn::Join": [ "", [
                                    "    \"node_name\": \"bamboo.", { "Ref": "ZoneName" }, "\","
                                    ] ] }, 
                                    "    \"home\": \"/mnt/storage/bamboo\",", 
                                    "    \"install_root\": \"/mnt/storage\"", 
                                    "  },", 
<% end %>
                                    "  \"storage\": {", 
                                    "    \"bind_dirs\": [", 
                                    "      \"/var/lib/mysql\"", 
<% if !@services.any? or @services.include? 'stash' %>
                                    "      ,\"/var/lib/stash\"", 
<% end %>
<% if !@services.any? or @services.include? 'bamboo' %>
                                    "      ,\"/var/lib/bamboo\"", 
<% end %>
<% if !@services.any? or @services.include? 'git' %>
                                    "      ,\"/var/lib/git\"",
<% end %>
<% if !@services.any? or @services.include? 'jenkins' %>
                                    "      ,\"/var/lib/jenkins\"", 
<% end %>
<% if !@services.any? or @services.include? 'jira' %>
                                    "      ,\"/var/lib/jira\"", 
<% end %>
<% if !@services.any? or @services.include? 'chef' %>
                                    "      ,\"/var/opt/opscode\"", 
<% end %>
                                    "    ],", 
                                    "    \"dirs\": [", 
<% if !@services.any? or @services.include? 'chef' %>
                                    "      \"/etc/chef-server\"", 
<% end %>
                                    "    ],", 
                                    "    \"mount_type\": \"aws_ebs\",", 
                                    { "Fn::Join": [ "", [
                                        "    \"description\": \"", { "Ref": "Description" }, "\","
                                    ] ] }, 
                                        "    \"aws\": {", 
                                    { "Fn::Join": [ "", [
                                        "        \"access_key\": ",
                                        "\"", { "Ref": "HostKeys" }, "\","
                                    ] ] }, 
                                    { "Fn::Join": [ "", [
                                        "        \"secret_access_key\": ",
                                        "\"", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] }, "\","
                                    ] ] }, 
                                    { "Fn::Join": [ "", [
                                        "        \"volume_id\": ",
                                        "\"",  { "Ref": "DevOpsServerVolume" }, "\""
                                    ] ] }, 
                                    "    }", 
                                    "  },",
<% if !@services.any? or @services.include? 'chef' %>
                                    "  \"chef-server\": {",
                                    { "Fn::Join": [ "", [
                                    "    \"api_fqdn\": \"chef.", { "Ref": "ZoneName" }, "\","
                                    ] ] }, 
                                    "    \"configuration\": {",
                                    "      \"nginx\": {",
                                    "        \"enable_non_ssl\": true,",
                                    "        \"non_ssl_port\": 8083,",
                                    "        \"ssl_port\": 4433",
                                    "      }, ",
                                    "      \"bookshelf\": {",
                                    { "Fn::Join": [ "", [
                                    "        \"external_url\": \"https://chef.", { "Ref": "ZoneName" }, "\""
                                    ] ] }, 
                                    "      }, ",
                                    "      \"opscode-erchef\": {",
                                    { "Fn::Join": [ "", [
                                    "        \"base_resource_url\": \"https://chef.", { "Ref": "ZoneName" }, "\""
                                    ] ] }, 
                                    "      }",
                                    "    }",
                                    "  },",
<% end %>
                                    "  \"reverse-proxy\": {",
                                    "    \"apps\": {",
<% if !@services.any? or @services.include? 'jenkins' %>
<%  one_reverse_proxy = true %>
                                    "        \"jenkins\": {",
                                    { "Fn::Join": [ "", [
                                        "            \"node_name\": \"jenkins.", { "Ref": "ZoneName" }, "\","
                                    ] ] },
                                    "            \"port\": 8090,",
                                    "            \"force_ssl\": true",
                                    "        }",
<% end %>
<% if !@services.any? or @services.include? 'chef' %>
<%  if one_reverse_proxy %>
                                    "        ,",
<%  end; one_reverse_proxy = true %>
                                    "        \"chef\": {",
                                    { "Fn::Join": [ "", [
                                        "            \"node_name\": \"chef.", { "Ref": "ZoneName" }, "\","
                                    ] ] }, 
                                    "            \"port\": 8083,",
                                    "            \"force_ssl\": false",
                                    "        }",
<% end %>
<% if !@services.any? or @services.include? 'jira' %>
<%  if one_reverse_proxy %>
                                    "        ,",
<%  end; one_reverse_proxy = true %>
                                    "        \"jira\": {",
                                    { "Fn::Join": [ "", [
                                        "            \"node_name\": \"jira.", { "Ref": "ZoneName" }, "\","
                                    ] ] }, 
                                    "            \"port\": 8080,",
                                    "            \"force_ssl\": false",
                                    "        }",
<% end %>
<% if !@services.any? or @services.include? 'stash' %>
<%  if one_reverse_proxy %>
                                    "        ,",
<%  end; one_reverse_proxy = true %>
                                    "        \"stash\": {",
                                    { "Fn::Join": [ "", [
                                        "            \"node_name\": \"stash.", { "Ref": "ZoneName" }, "\","
                                    ] ] }, 
                                    "            \"port\": 7990,",
                                    "            \"force_ssl\": false",
                                    "        }",
<% end %>
<% if !@services.any? or @services.include? 'bamboo' %>
<%  if one_reverse_proxy %>
                                    "        ,",
<%  end; one_reverse_proxy = true %>
                                    "        \"bamboo\": {",
                                    { "Fn::Join": [ "", [
                                        "            \"node_name\": \"bamboo.", { "Ref": "ZoneName" }, "\","
                                    ] ] }, 
                                    "            \"port\": 8085,",
                                    "            \"force_ssl\": false",
                                    "        }",
<% end %>
                                    "    },",
                                    "    \"ssl\": {",
                                    "        \"enabled\": true,",
                                    { "Fn::Join": [ "", [
                                    "        \"certificate_file\": \"/mnt/storage/ssl/", { "Ref": "ZoneName" }, "/server.crt\","
                                    ] ] }, 
                                    { "Fn::Join": [ "", [
                                    "        \"certificate_key_file\": \"/mnt/storage/ssl/", { "Ref": "ZoneName" }, "/server.key\","
                                    ] ] }, 
                                    { "Fn::Join": [ "", [
                                    "        \"certificate_chain_file\": \"/mnt/storage/ssl/", { "Ref": "ZoneName" }, "/server.crt\","
                                    ] ] }, 
                                    "        \"certificate\": {",
                                    { "Fn::Join": [ "", [
                                        "            \"common_name\": \"", { "Ref": "ZoneName" }, "\""
                                    ] ] }, 
                                    "        }",
                                    "    }",
                                    "  }",
                                    "}"
                                ] ] }, 
                                "group": "root", 
                                "mode": "0644", 
                                "owner": "root"
                            }, 
                            "/etc/chef/zero.rb": {
                                "content": { "Fn::Join": [ "", [
                                    { "Fn::If": [ "Debug", "log_level :info\n", "" ] },
                                    "log_location \"/var/log/chef-zero.log\"\n", 
                                    "file_cache_path \"/var/lib/chef-zero\"\n", 
                                    "chef_repo_path \"/var/lib/chef-zero\"\n", 
                                    "json_attribs \"/etc/chef/node.json\"\n"
                                ] ] }, 
                                "group": "root", 
                                "mode": "0644", 
                                "owner": "root"
                            }
                        }, 
                        "commands" : {
                            "01_install_chef" : {
                                "command" : "bash /tmp/install-chef.sh",
                                "cwd" : "/tmp"
                            }
                        }
                    },
                    "unpack_repo" : {
                        "files" : {
                            "/tmp/chef_repo.tar.gz": {
                                "source": { "Ref": "ChefRepoURL" },
                                "mode": "0600",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/cookbooks.tar.gz": {
                                "source": { "Ref": "ChefCookbooksURL" },
                                "mode": "0600",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands" : {
                            "01_create_chef_dir" : {
                                "command" : "mkdir -p /var/lib/chef-zero"
                            },
                            "02_unpack_chef_repo" : {
                                "command" : "tar -zxvf /tmp/chef_repo.tar.gz -C /var/lib/chef-zero",
                                "cwd" : "/tmp"
                            },
                            "03_unpack_cookbooks" : {
                                "command" : "tar -zxvf /tmp/cookbooks.tar.gz -C /var/lib/chef-zero",
                                "cwd" : "/tmp"
                            }
                        }
                    },
                    "run_chef" : {
                        "commands" : {
                            "01_run_chef" : {
                                "command" : "/usr/bin/chef-client -z -c /etc/chef/zero.rb -j /etc/chef/node.json -l debug",
                                "env" : { "HOME" : "/var/lib/chef-zero" }
                            }
                        }
                    }
                }
            }, 
            "Properties": {
                "AvailabilityZone": { "Ref": "AvailabilityZone" }, 
                "ImageId": { "Ref": "ImageId" }, 
                "InstanceType": { "Ref": "InstanceType" }, 
                "KeyName": { "Ref": "KeyName" }, 
                "SecurityGroups": [
                    { "Ref": "DevOpsServerSecurityGroup" }
                ],
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": [ "", [ { "Ref": "StackName" } , "-all" ] ] } }
                ],
                "UserData": {
                    "Fn::Base64": { "Fn::Join": [ "", [
                        "#!/bin/bash -ex\n", 
                        "apt-get update\n", 
                        "apt-get -y install python-setuptools\n", 
                        "wget -P /root https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz", 
                        "\n", 
                        "mkdir -p /root/aws-cfn-bootstrap-latest", 
                        "\n", 
                        "tar xvfz /root/aws-cfn-bootstrap-latest.tar.gz --strip-components=1 -C /root/aws-cfn-bootstrap-latest", 
                        "\n", 
                        "easy_install /root/aws-cfn-bootstrap-latest/", 
                        "\n", 
                        "# Helper function\n",
                        "function error_exit\n",
                        "{\n",
                        "#  /usr/local/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "DevOpsServerWaitHandle" }, "'\n",
                        "  exit 1\n",
                        "}\n",
                        "cfn-init -s ", { "Ref": "AWS::StackName" }, 
                        " -r DevOpsServerInstance ", 
                        "         --access-key ", { "Ref": "HostKeys" }, 
                        "         --secret-key ", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] }, 
                        "         --region ", { "Ref": "AWS::Region" }, 
                        " || error_exit 'Failed to run cfn-init' &&\n", 
                        "cfn-signal -e $? '", { "Ref": "DevOpsServerWaitHandle" }, "' &&\n",
                        "cfn-hup || error_exit 'Failed to start cfn-hup'\n"
                    ] ] }
                }
            }
        }, 
        "DevOpsServerDNS": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "Comment": { "Ref": "AWS::StackName" }, 
                "HostedZoneName": { "Fn::Join": [ "", [ { "Ref": "ZoneName" }, "." ] ] }, 
                "RecordSets": [
<% if !@services.any? or @services.include? 'jira' %>
                    {
                        "Name": { "Fn::Join": [ "", [ "jira.", { "Ref": "ZoneName" }, "." ] ] }, 
                        "ResourceRecords": [
                            { "Fn::Join": [ "", [ "ops.", { "Ref": "ZoneName" }, "." ] ] }
                        ], 
                        "TTL": "900", 
                        "Type": "CNAME"
                    }, 
<% end %>
<% if !@services.any? or @services.include? 'stash' %>
                    {
                        "Name": { "Fn::Join": [ "", [ "stash.", { "Ref": "ZoneName" }, "." ] ] }, 
                        "ResourceRecords": [
                            { "Fn::Join": [ "", [ "ops.", { "Ref": "ZoneName" }, "." ] ] }
                        ], 
                        "TTL": "900", 
                        "Type": "CNAME"
                    }, 
<% end %>
<% if !@services.any? or @services.include? 'bamboo' %>
                    {
                        "Name": { "Fn::Join": [ "", [ "bamboo.", { "Ref": "ZoneName" }, "." ] ] }, 
                        "ResourceRecords": [
                            { "Fn::Join": [ "", [ "ops.", { "Ref": "ZoneName" }, "." ] ] }
                        ], 
                        "TTL": "900", 
                        "Type": "CNAME"
                    }, 
<% end %>
<% if !@services.any? or @services.include? 'jenkins' %>
                    {
                        "Name": { "Fn::Join": [ "", [ "jenkins.", { "Ref": "ZoneName" }, "." ]] }, 
                        "ResourceRecords": [
                            { "Fn::Join": [ "", [ "ops.", { "Ref": "ZoneName" }, "." ] ] }
                        ], 
                        "TTL": "900", 
                        "Type": "CNAME"
                    },
<% end %>
<% if !@services.any? or @services.include? 'chef' %>
                    {
                        "Name": { "Fn::Join": [ "", [ "chef.", { "Ref": "ZoneName" }, "." ]] }, 
                        "ResourceRecords": [
                            { "Fn::Join": [ "", [ "ops.", { "Ref": "ZoneName" }, "." ] ] }
                        ], 
                        "TTL": "900", 
                        "Type": "CNAME"
                    },
<% end %>
                    {
                        "Name": { "Fn::Join": [ "", [ "ops.", { "Ref": "ZoneName" }, "." ] ] }, 
                        "ResourceRecords": [
                            { "Fn::GetAtt": [ "DevOpsServerInstance", "PublicIp" ] }
                        ], 
                        "TTL": "60", 
                        "Type": "A"
                    }
                ]
            }
        }, 
        "DevOpsServerUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyName": "cloudformation",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": "cloudformation:DescribeStackResource", 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }
                            ]
                        }
                    }, 
                    {
                        "PolicyName": "ec2",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [ "ec2:*" ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        }, 
        "DevOpsServerVolume": {
            "DeletionPolicy": "Delete",
            "Properties": {
                "AvailabilityZone": { "Ref": "AvailabilityZone" }, 
                "Iops": 100, 
                "Size": 15, 
                "SnapshotId": {
                    "Fn::If": [
                        "CreateFromSnapshot",
                        { "Ref": "SnapshotId" },
                        { "Ref": "AWS::NoValue" }
                    ]
                },
                "VolumeType": "io1"
            }, 
            "Type": "AWS::EC2::Volume"
        }, 
        "DevOpsServerWaitForInstance": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "DevOpsServerInstance", 
            "Properties": {
                "Handle": { "Ref": "DevOpsServerWaitHandle" }, 
                "Timeout": { "Fn::If": [ "Debug", "43200", "3600" ] }
            }
        }, 
        "DevOpsServerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }
    }
}
